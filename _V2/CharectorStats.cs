using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;


public class CharectorStats
{
    private static List<List<int>> HeroList;
    private static List<int> HeroDefault = new List<int> { 0, 0, 0, 0, 0 };
    private static int[,] HeroDif = new int[49, 5]
    {{2,2,2,2,2},{2,1,3,2,2},{1,2,2,2,3},{2,3,2,1,2},{1,3,2,2,3},{3,1,2,2,2},{2,2,3,2,1},{2,3,2,1,2},{2,1,3,1,3},{2,1,3,3,1},{1,3,1,2,3},{3,1,1,3,2},{2,3,1,1,3},{3,2,1,3,1},{1,3,2,1,3},{2,3,1,1,3},{2,1,3,3,1},{3,1,3,1,2},{3,1,2,1,3},{0,3,2,1,4},{0,2,4,3,1},{2,1,4,3,0},{1,2,4,3,0},{2,1,3,1,2},{0,1,2,3,4},{2,1,3,2,1},{1,1,2,3,2},{1,2,2,1,3},{1,3,2,0,4},{2,2,1,1,3},{3,0,2,1,4},{0,4,1,2,3},{1,3,0,2,4},{1,3,2,0,4},{2,2,1,1,3},{1,2,2,3,1},{2,3,1,1,2},{3,2,1,1,2},{1,2,3,1,2},{1,2,2,3,1},{0,3,4,2,1},{2,1,4,3,0},{1,2,2,1,3},{0,4,1,2,3},{2,1,2,3,1},{1,3,1,0,4},{1,0,2,3,4},{2,3,4,0,1},{0,3,1,2,4}};
    private static List<int> XPT0 = new List<int>
    { 100, 300, 600, 1000, 1500, 2100, 2800, 3600, 4500 };
    private static List<int> XPT1 = new List<int> 
    { 100, 300, 600, 1000, 1500, 2100, 2800, 3600, 4500, 5500, 6600, 7800, 9100, 10500, 12000, 13600, 15300, 17100, 19000, 21000, 23100, 25300, 27600, 30000, 32500, 35100, 37800, 40600, 43500, 46500, 49600, 52800, 56100, 59500, 63000, 66600, 70300, 74100, 78000, 82000, 86100, 90300, 94600, 99000, 103500, 108100, 112800, 117600, 122500 };
    private static List<int> XPT2 = new List<int>
    {200,550,1050,1700,2500,3450,4550,5800,7200,8750,10450,12300,14300,16450,18750,21200,23800,26550,29450,32500,35700,39050,42550,46200,50000,53950,58050,62300,66700,71250,75950,80800,85800,90950,96250,101700,107300,113050,118950,125000,131200,137550,144050,150700,157500,164450,171550,178800,186200,193750,201450,209300,217300,225450,233750,242200,250800,259550,268450,277500,286700,296050,305550,315200,325000,334950,345050,355300,365700,376250,386950,397800,408800,419950};
    private static List<int> XPT3 = new List<int>
    {500,1200,2100,3200,4500,6000,7700,9600,11700,14000,16500,19200,22100,25200,28500,32000,35700,39600,43700,48000,52500,57200,62100,67200,72500,78000,83700,89600,95700,102000,108500,115200,122100,129200,136500,144000,151700,159600,167700,176000,184500,193200,202100,211200,220500,230000,239700,249600,259700,270000,280500,291200,302100,313200,324500,336000,347700,359600,371700,384000,396500,409200,422100,435200,448500,462000,475700,489600,503700,518000,532500,547200,562100,577200,592500,608000,623700,639600,655700,672000,688500,705200,722100,739200,756500,774000,791700,809600,827700,846000,864500,883200,902100,921200,940500,960000,979700,999600,1019700};
    private static List<int> XPT4 = new List<int>
    {750,1750,3000,4500,6250,8250,10500,13000,15750,18750,22000,25500,29250,33250,37500,42000,46750,51750,57000,62500,68250,74250,80500,87000,93750,100750,108000,115500,123250,131250,139500,148000,156750,165750,175000,184500,194250,204250,214500,225000,235750,246750,258000,269500,281250,293250,305500,318000,330750,343750,357000,370500,384250,398250,412500,427000,441750,456750,472000,487500,503250,519250,535500,552000,568750,585750,603000,620500,638250,656250,674500,693000,711750,730750,750000,769500,789250,809250,829500,850000,870750,891750,913000,934500,956250,978250,1000500,1023000,1045750,1068750,1092000,1115500,1139250,1163250,1187500,1212000,1236750,1261750,1287000,1312500,1338250,1364250,1390500,1417000,1443750,1470750,1498000,1525500,1553250,1581250,1609500,1638000,1666750,1695750,1725000,1754500,1784250,1814250,1844500,1875000,1905750,1936750,1968000,1999500,2031250,2063250,2095500,2128000,2160750,2193750,2227000,2260500,2294250,2328250,2362500,2397000,2431750,2466750,2502000,2537500,2573250,2609250,2645500,2682000,2718750,2755750,2793000,2830500,2868250};
    private static List<int> XPT5 = new List<int>
    {1000,2500,4500,7000,10000,13500,17500,22000,27000,32500,38500,45000,52000,59500,67500,76000,85000,94500,104500,115000,126000,137500,149500,162000,175000,188500,202500,217000,232000,247500,263500,280000,297000,314500,332500,351000,370000,389500,409500,430000,451000,472500,494500,517000,540000,563500,587500,612000,637000,662500,688500,715000,742000,769500,797500,826000,855000,884500,914500,945000,976000,1007500,1039500,1072000,1105000,1138500,1172500,1207000,1242000,1277500,1313500,1350000,1387000,1424500,1462500,1501000,1540000,1579500,1619500,1660000,1701000,1742500,1784500,1827000,1870000,1913500,1957500,2002000,2047000,2092500,2138500,2185000,2232000,2279500,2327500,2376000,2425000,2474500,2524500,2575000,2626000,2677500,2729500,2782000,2835000,2888500,2942500,2997000,3052000,3107500,3163500,3220000,3277000,3334500,3392500,3451000,3510000,3569500,3629500,3690000,3751000,3812500,3874500,3937000,4000000,4063500,4127500,4192000,4257000,4322500,4388500,4455000,4522000,4589500,4657500,4726000,4795000,4864500,4934500,5005000,5076000,5147500,5219500,5292000,5365000,5438500,5512500,5587000,5662000,5737500,5813500,5890000,5967000,6044500,6122500,6201000,6280000,6359500,6439500,6520000,6601000,6682500,6764500,6847000,6930000,7013500,7097500,7182000,7267000,7352500,7438500,7525000,7612000,7699500,7787500,7876000,7965000,8054500,8144500,8235000,8326000,8417500,8509500,8602000,8695000,8788500,8882500,8977000,9072000,9167500,9263500,9360000,9457000,9554500,9652500,9751000,9850000,9949500,10049500,10150000,10251000,10352500,10454500,10557000,10660000,10763500,10867500,10972000,11077000,11182500,11288500,11395000,11502000,11609500,11717500,11826000,11935000,12044500,12154500,12265000,12376000,12487500,12599500,12712000,12825000,12938500,13052500,13167000,13282000,13397500,13513500,13630000,13747000,13864500,13982500,14101000,14220000,14339500,14459500,14580000,14701000,14822500,14944500,15067000,15190000,15313500,15437500,15562000,15687000};
    private static List<int> T1Cost = new List<int>
    { 100, 250 };
    private static List<int> T2Cost = new List<int>
    { 250, 500, 1000 };
    private static List<int> T3Cost = new List<int>
    { 1000, 2500, 5000 };
    private static List<int> T4Cost = new List<int>
    { 5000, 10000, 15000 };
    private static List<int> T5Cost = new List<int>
    { 15000, 30000, 75000 };
    public static int SkillPoints;
    public static List<int> CurrentHero;
    public static string SaveManagerData()
    {
        string sendSave = "";
        sendSave += SkillPoints.ToString();
        sendSave += "|";
        for (int x = 0; x < HeroList.Count; x++)
        {
            for (int y = 0; y < HeroList[x].Count; y++)
            {
                sendSave += HeroList[x][y].ToString();
                sendSave += ",";
            }
            sendSave += "|";
        }
        return sendSave;
    }
    public static void LoadManagerData(string input)
    {
        if (input == "")
        {
            NewGame();
            SkillPoints = 0;
        }
        else
        {
            SkillPoints = Convert.ToInt32(input.Substring(0, (input.IndexOf(',') - 1)));
            input.RemoveAt(0, 1);

            int counter = 0;
            int counting = 0;
            while (input.IndexOf('|') > 0)
            {
                HeroList.Add(HeroDefault);
                while (input.IndexOf(',') < input.IndexOf('|'))
                {
                    HeroList[counter][counting] = Convert.ToInt32(input.Substring(0, (input.IndexOf(',') - 1)));
                    input.RemoveAt(0);
                    counting++;
                }
                counting = 0;
                input.RemoveAt(0);
                counter++;
            }
        }
    }
    public static void NewGame()
    {
        List<int> tempList = HeroDefault;
        tempList.Insert(0, 0);
        HeroList.Add(tempList);
    }
    public static List<int> UnlockedCharectors()
    {
        List<int> Allhero = new List<int> { };
        for (int i = 0; i < HeroList.Count; i++)
        {
            Allhero.Add(HeroList[i][0]);
        }
        return Allhero;
    }
    public static List<int> CharStats(int charNum) { return (HeroList[charNum]); }
    public static void AutoSkill(int CharUsed)
    {
        int temp = HeroList[CharUsed][1];
        if (HeroList[CharUsed][1] > HeroList[CharUsed][2]) HeroList[CharUsed][2]++;
        else if (HeroList[CharUsed][1] > HeroList[CharUsed][3]) HeroList[CharUsed][3]++;
        else if (HeroList[CharUsed][1] > HeroList[CharUsed][4]) HeroList[CharUsed][4]++;
        else if (HeroList[CharUsed][1] > HeroList[CharUsed][5]) HeroList[CharUsed][5]++;
        else HeroList[CharUsed][1]++;

    }
    public static void ManualSkill(int skill, int CharUsed) => HeroList[CharUsed][skill]++;
    public static void LevelUP() => SkillPoints++;
}
